{"remainingRequest":"/Users/orange-juice/Code/VueMastery/personal-todo-board/node_modules/babel-loader/lib/index.js!/Users/orange-juice/Code/VueMastery/personal-todo-board/node_modules/eslint-loader/index.js??ref--13-0!/Users/orange-juice/Code/VueMastery/personal-todo-board/src/store.js","dependencies":[{"path":"/Users/orange-juice/Code/VueMastery/personal-todo-board/src/store.js","mtime":1568386703630},{"path":"/Users/orange-juice/Code/VueMastery/personal-todo-board/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/orange-juice/Code/VueMastery/personal-todo-board/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/orange-juice/Code/VueMastery/personal-todo-board/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport defaultBoard from \"./default-board\";\nimport { saveStatePlugin, uuid } from \"./utils\";\nVue.use(Vuex);\nvar board = JSON.parse(localStorage.getItem('board')) || defaultBoard;\nexport default new Vuex.Store({\n  plugins: [saveStatePlugin],\n  state: {\n    board: board\n  },\n  getters: {\n    getTask: function getTask(state) {\n      return function (id) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = state.board.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var column = _step.value;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = column.tasks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var task = _step2.value;\n\n                if (task.id === id) {\n                  return task;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n    }\n  },\n  mutations: {\n    CREATE_TASK: function CREATE_TASK(state, _ref) {\n      var tasks = _ref.tasks,\n          name = _ref.name;\n      tasks.push({\n        name: name,\n        id: uuid(),\n        description: ''\n      });\n    },\n    CREATE_COLUMN: function CREATE_COLUMN(state, _ref2) {\n      var name = _ref2.name;\n      state.board.columns.push({\n        name: name,\n        tasks: []\n      });\n    },\n    UPDATE_TASK: function UPDATE_TASK(state, _ref3) {\n      var task = _ref3.task,\n          key = _ref3.key,\n          value = _ref3.value;\n      task[key] = value;\n    },\n    MOVE_TASK: function MOVE_TASK(state, _ref4) {\n      var fromTasks = _ref4.fromTasks,\n          toTasks = _ref4.toTasks,\n          fromTaskIndex = _ref4.fromTaskIndex,\n          toTaskIndex = _ref4.toTaskIndex;\n      var taskToMove = fromTasks.splice(fromTaskIndex, 1)[0];\n      toTasks.splice(toTaskIndex, 0, taskToMove);\n    },\n    MOVE_COLUMN: function MOVE_COLUMN(state, _ref5) {\n      var fromColumnIndex = _ref5.fromColumnIndex,\n          toColumnIndex = _ref5.toColumnIndex;\n      var columnList = state.board.columns;\n      var columnToMove = columnList.splice(fromColumnIndex, 1)[0];\n      columnList.splice(toColumnIndex, 0, columnToMove);\n    }\n  }\n});",{"version":3,"sources":["/Users/orange-juice/Code/VueMastery/personal-todo-board/src/store.js"],"names":["Vue","Vuex","defaultBoard","saveStatePlugin","uuid","use","board","JSON","parse","localStorage","getItem","Store","plugins","state","getters","getTask","id","columns","column","tasks","task","mutations","CREATE_TASK","name","push","description","CREATE_COLUMN","UPDATE_TASK","key","value","MOVE_TASK","fromTasks","toTasks","fromTaskIndex","toTaskIndex","taskToMove","splice","MOVE_COLUMN","fromColumnIndex","toColumnIndex","columnList","columnToMove"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport defaultBoard from './default-board'\nimport { saveStatePlugin, uuid } from './utils'\n\nVue.use(Vuex)\n\nconst board = JSON.parse(localStorage.getItem('board')) || defaultBoard\n\nexport default new Vuex.Store({\n  plugins: [saveStatePlugin],\n  state: {\n    board: board\n  },\n  getters: {\n    getTask(state) {\n      return id => {\n        for (const column of state.board.columns) {\n          for (const task of column.tasks) {\n            if (task.id === id) {\n              return task\n            }\n          }\n        }\n      }\n    }\n  },\n  mutations: {\n    CREATE_TASK(state, { tasks, name }) {\n      tasks.push({\n        name,\n        id: uuid(),\n        description: ''\n      })\n    },\n    CREATE_COLUMN(state, { name }) {\n      state.board.columns.push({\n        name,\n        tasks: []\n      })\n    },\n    UPDATE_TASK(state, { task, key, value }) {\n      task[key] = value\n    },\n    MOVE_TASK(state, { fromTasks, toTasks, fromTaskIndex, toTaskIndex }) {\n      const taskToMove = fromTasks.splice(fromTaskIndex, 1)[0]\n      toTasks.splice(toTaskIndex, 0, taskToMove)\n    },\n    MOVE_COLUMN(state, { fromColumnIndex, toColumnIndex }) {\n      const columnList = state.board.columns\n\n      const columnToMove = columnList.splice(fromColumnIndex, 1)[0]\n      columnList.splice(toColumnIndex, 0, columnToMove)\n    }\n  }\n})\n"]}]}